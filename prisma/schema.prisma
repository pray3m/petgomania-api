// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum ProductCategory {
  food
  toys
  accessories
  healthcare
  grooming
}

enum PaymentState {
  CREATED
  APPROVED
  DECLINED
  PENDING
  REFUNDED
}

model User {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  password     String
  role         UserRole  @default(USER)
  isVerified   Boolean   @default(false)
  otpCode      String?
  otpExpiresAt DateTime?
  otpAttempts  Int?      @default(0)
  createdAt    DateTime  @default(now())

  pets               Pet[]
  orders             Order[]
  // adoptions          Adoption[] // TODO : Remove this model
  sentMessages       Message[]      @relation("SentMessages")
  receivedMessages   Message[]      @relation("ReceivedMessages")
  userConversations1 Conversation[] @relation("User1Conversations")
  userConversations2 Conversation[] @relation("User2Conversations")

  @@index([email])
}

// Pet Store E-Commerce
model Product {
  id          Int             @id @default(autoincrement())
  name        String
  description String
  price       Float
  category    ProductCategory
  stock       Int
  imageUrl    String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  OrderItem OrderItem[]
}

model Order {
  id         Int         @id @default(autoincrement())
  totalPrice Float
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  userId     Int
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  payment    Payment?

  shippingAddress ShippingAddress?

  @@index([userId])
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId   Int
  productId Int
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Payment {
  id          Int          @id @default(autoincrement())
  payuOrderId String       @unique
  state       PaymentState @default(CREATED)
  response    Json?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  orderId Int   @unique
  order   Order @relation(fields: [orderId], references: [id])

  @@index([orderId])
  @@index([payuOrderId])
}

model ShippingAddress {
  id            Int     @id @default(autoincrement())
  fullName      String
  addressLine1  String
  addressLine2  String?
  city          String
  state         String
  postalCode    String
  country       String
  contactNumber String

  orderId   Int      @unique
  order     Order    @relation(fields: [orderId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
}

// Pet Adoption

enum PetStatus {
  AVAILABLE
  PENDING
  ADOPTED
}

enum PetGender {
  MALE
  FEMALE
  UNKNOWN
}

enum PetHealthStatus {
  HEALTHY
  SICK
  RECOVERING
}

model Pet {
  id           Int              @id @default(autoincrement())
  name         String
  breed        String
  age          Int
  gender       PetGender
  status       PetStatus        @default(AVAILABLE)
  healthStatus PetHealthStatus?
  description  String
  location     String
  imageUrl     String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  userId        Int
  user          User           @relation(fields: [userId], references: [id])
  conversations Conversation[]

  @@index([breed])
  @@index([userId])
  @@index([status])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)

  senderId       Int
  receiverId     Int
  conversationId Int
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  @@index([senderId])
  @@index([receiverId])
  @@index([conversationId])
}

model Conversation {
  id        Int      @id @default(autoincrement())
  user1Id   Int // Interested party
  user2Id   Int // Pet owner
  petId     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user1    User      @relation("User1Conversations", fields: [user1Id], references: [id])
  user2    User      @relation("User2Conversations", fields: [user2Id], references: [id])
  pet      Pet       @relation(fields: [petId], references: [id])
  messages Message[]

  @@unique([user1Id, user2Id, petId])
  @@index([petId])
}
