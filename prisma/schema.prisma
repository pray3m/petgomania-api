// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 1. User Model
model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String   @default("user") // 'admin' or 'user'
  createdAt DateTime @default(now())

  // Relationships
  products           Product[]
  pets               Pet[]
  orders             Order[]
  adoptions          Adoption[]
  sentMessages       Message[]      @relation("SentMessages") // Relation to messages sent by the user
  receivedMessages   Message[]      @relation("ReceivedMessages") // Relation to messages received by the user
  userConversations1 Conversation[] @relation("User1Conversations")
  userConversations2 Conversation[] @relation("User2Conversations")
}

// 2. Product Model
model Product {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  price       Float
  category    String
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  userId Int
  user   User    @relation(fields: [userId], references: [id])
  orders Order[]
}

// 3. Pet Model
model Pet {
  id           Int      @id @default(autoincrement())
  name         String
  breed        String
  age          Int
  healthStatus String?
  description  String
  imageUrl     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  userId    Int
  user      User       @relation(fields: [userId], references: [id])
  adoptions Adoption[]
}

// 4. Order Model
model Order {
  id         Int      @id @default(autoincrement())
  quantity   Int
  totalPrice Float
  status     String   @default("pending") // 'pending', 'shipped', 'delivered'
  createdAt  DateTime @default(now())

  // Relationships
  userId    Int
  productId Int
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

// 5. Adoption Model
model Adoption {
  id        Int      @id @default(autoincrement())
  status    String   @default("pending") // 'pending', 'approved', 'rejected'
  createdAt DateTime @default(now())

  // Relationships
  petId     Int
  adopterId Int
  pet       Pet  @relation(fields: [petId], references: [id])
  adopter   User @relation(fields: [adopterId], references: [id])
}

// 6. Message Model
model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  // Relationships
  senderId       Int
  receiverId     Int
  conversationId Int
  sender         User         @relation("SentMessages", fields: [senderId], references: [id])
  receiver       User         @relation("ReceivedMessages", fields: [receiverId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id])
}

// 7. Conversation Model
model Conversation {
  id        Int      @id @default(autoincrement())
  user1Id   Int
  user2Id   Int
  createdAt DateTime @default(now())

  // Relationships
  user1    User      @relation("User1Conversations", fields: [user1Id], references: [id])
  user2    User      @relation("User2Conversations", fields: [user2Id], references: [id])
  messages Message[]
}
